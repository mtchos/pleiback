// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/usecase/track_usecase.go
//
// Generated by this command:
//
//	mockgen --source=internal/domain/usecase/track_usecase.go --destination=internal/domain/service/mock/mock_track_service.go --package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	"github.com/mtchos/pleiback/old/internal/domain/entity"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockTrackService is a mock of TrackService interface.
type MockTrackService struct {
	ctrl     *gomock.Controller
	recorder *MockTrackServiceMockRecorder
	isgomock struct{}
}

// MockTrackServiceMockRecorder is the mock recorder for MockTrackService.
type MockTrackServiceMockRecorder struct {
	mock *MockTrackService
}

// NewMockTrackService creates a new mock instance.
func NewMockTrackService(ctrl *gomock.Controller) *MockTrackService {
	mock := &MockTrackService{ctrl: ctrl}
	mock.recorder = &MockTrackServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTrackService) EXPECT() *MockTrackServiceMockRecorder {
	return m.recorder
}

// Search mocks base method.
func (m *MockTrackService) Search(query string) ([]entity.Track, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", query)
	ret0, _ := ret[0].([]entity.Track)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search.
func (mr *MockTrackServiceMockRecorder) Search(query any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockTrackService)(nil).Search), query)
}
